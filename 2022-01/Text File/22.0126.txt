## Garbage Collection

### Stop-the-world

* GC를 실행하기 위해 JVM이 애플리케이션 실행을 멈추는 것이다.
* GC를 실행하는 스레드를 제외한 나머지 스레드는 모두 작업을 멈춘다.
* GC튜닝은 이 stop-the-world 시간을 줄이는 것이다.

### 개론

* System.gc()메소드를 절대 사용해서는 안된다. 시스템의 성능에 매우 큰 영향을 끼친다.
* 더 이상 필요없는 객체를 찾아 치우는 작업을 한다.
* 두 가지 가설 weak generaional hypothesis
  1. 대부분의 객체는 금방 접근 불가능 상태가 된다.
  2. 오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재한다.
* 이 가설의 장점을 최대한 살리기 위해서 HotSpot VM에는 Young, Old 두 개의 물리적 공간을 나누었다.

### Young Generation(Young)

* 새롭게 생성한 객체의 대부분이 위치한다.
* 대부분의 객체가 금방 접근 불가능 상태가 되기 때문에 매우 많은 객체가 Young영역에 생성되었다가 사라진다.
* 이 영역에서 객체가 사라질 때 Minor GC가 발생한다.
* 3 영역으로 나뉜다. (Eden + Survivor 2개)
* 새로 생성한 대부분의 객체는 Eden 영역에 위치한다.
* Eden 영역에서 GC가 한 번 발생한 후 살아남은 객체는 Survivor 영역중 하나로 이동된다.
* Eden 영역에서 GC가 발생하면 이미 살아남은 객체가 존재하는 Survivor 영역으로 객체가 계속 쌓인다.
* 하나의 Survivor 영역이 가득 차게 되면 그 중에서 살아남은 객체를 다른 Survivor 영역으로 이동한다. 그리고 가득 찬 Survivor 영역은 아무 데이터도 없는 상태로 된다.
* 이 과정을 반복하다가 계속해서 살아남아 있는 개체는 Old 영역으로 이동하게 된다. 
* Survivor 영역 중 하나는 반드시 비어 있는 상태로 나아 있어야 한다.
* 만약 두 영역에 모두 데이터가 존재하거나, 두 영역 모두 사용량이 0이라면 정상적인 상황이 아니다.

### Old Generation(Old)

* 접근 불가능 상태로 되지 않아 Young 영역에서 살아남은 객체가 이곳으로 복사된다.
* Young 영역보다는 크게 할당하며, 크기가 큰 만큼 Young 영역보다 GC는 적게 발생한다.
* 이 영역에서 객체가 사라질 때 Major GC(Full GC)가 발생한다.
* Old 영역에 있는 객체가 Young 영역의 객체를 참조하는 경우 카드 테이블을 이용한다.
* 카드 테이블
  * Old 영역에는 512Byte의 덩어리(chunk)로 되어 있는 카드 테이블(Card Table)이 존재한다.
  * Old 영역에 있는 객체가 Young 영역의 객체를 참조할 때 마다 정보가 표시된다.
  * Young 영역의 GC를 실행할 때에는 Old 영역의 모든 객체의 참조를 확인하지 않고, 이 카드 테이블만 뒤져서 GC 대상인지 식별한다
  * write barrier를 사용하여 관리한다. Minor GC를 빠르게 할 수 있도록 하는 장치이다. 약간의 오버헤드는 발생하지만 전반적인 GC 시간은 줄어들게 된다.

### Old GC

* Serial GC
  * 절대 사용하면 안 되는 방식이다.
  * CPU 코어가 1개만 있을 때 사용하기 위해 만든 방식이다.
  * 애플리케이션의 성능이 많이 떨어진다.
  * 적은 메모리와 CPU 코어 개수가 적을 때 적합한 방식이다.
  * GC를 처리하는 스레드가 하나다.
  * Old 영역의 GC는 Mark-Sweep-Compact 알고리즘을 사용한다.
    1. Old 영역에 살아 있는 객체를 식별(Mark)한다.
    2. Heap의 앞 부분부터 확인하여 살아 있는 것만 남긴다.(Sweep)
    3. 각 객체들이 연속되게 쌓이도록 Heap의 가장 앞 부분부터 채워서 객체가 존재하는 부분과 객체가 없는 부분으로 나눈다.(Compaction)
* Parallel GC
  * GC를 처리하는 쓰레드가 여러 개이다.
  * Serial GC보다 빠르게 객체를 처리할 수 있다.
  * 메모리가 충분하고 코어의 개수가 많을 때 유리하다.
* Parallel Old GC(Parallel Compacting GC)
  * Old 영역의 GC는 Mark-Summary-Compaction 단계를 거친다.
  * Summary 단계는 앞서 GC를 수행한 영역에 대해서 별도로 살아 있는 객체를 식별한다.
  * Mark-Sweep-Compaction 알고리즘의 Sweep 단계와 다르다.
* Concurrent Mark & Sweep GC(CMS)
  * Stop-the-world 시간이 매우 짧다.
  * 모든 애플리케이션의 응답 속도가 매우 중요할 때 CMS GC를 사용한다.
  * Low Latency GC라고도 한다.
  * 다른 GC보다 메모리와 CPU를 더 많이 사용한다.
  * Compaction 단계가 기본적으로 제공되지 않는다.
  * 초기 Initial Mark 단계에서는 클래스 로더에서 가장 가까운 객체 중 살아있는 객체만 찾는 것으로 끝난다. 멈추는 시간은 매우 짧다.
  * Current Mark 단계에서는 살아있다고 확인한 객체에서 참조하고 있는 객체들을 따라가면서 확인한다. 다른 스레드가 실행 중인 상태에서 동시에 진행된다.
  * Remark 단계에서는 Concurrent Mark 단계에서 새로 추가되거나 참조가 끊긴 객체를 확인한다.
  * Concurrent Sweep 단계에서는 쓰레기를 정리하는 작업을 실행한다. 다른 스레드가 실행되고 있는 상황에서 진행한다.
* G1(Garbage First) GC
  * 가장 성능이 빠르다.
  * 아직 안정화 단계이다.

### Permanent Genration(Perm)

* Method Area
* 객체나 억류(intern)된 문자열 정보를 저장한다.
* Old 영역에서 살아남은 객체가 영원히 남아 있는 곳은 절대 아니다.
* 이 영역에서 발생하는 GC는 Major GC의 횟수에 포함된다.

## Spring

### Spring

* 스스로 발전하는 프레임워크
* 스프링 개발 철학 중 하나는 "항상 프레임워크 기반의 접근 방법을 사용하라"
* 스프링 기능의 대부분은 핵심 기능을 확장해서 발전시킨 결과물이다.
* 단순함과 유연성을 중요 가치로 생각한다.
* 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크
* 필요한 부분만 가져다 사용할 수 있도록 모듈화 되어 있다.
* 각 모듈은 독립적으로 분리되어 있고, 재사용이 가능하다.
* IoC/DI/AOP를 지원한다.

### Spring Boot

* Spring Project의 하나
* 초기 수작업의 셋팅을 자동으로 해준다.
* 프로젝트마다 기본적으로 설정하게 되는 부분들을 이미 내부적으로 가지고 있다.
* Servlet Contatiner를 기본 내장하고 있다.(Tomcat, Jetty)
* Pom.xml에서 의존 라이브러리의 버전을 자동으로 관리해준다.
* 자주 사용하는 프로젝트 조합을 미리 만들어 놓고 스프링을 더욱 쉽고 간단하게 사용하기 위해 만들어졌다.

### Spring Bean Life Cycle

1. Bean 인스턴스화 및 DI
   1. XML파일 / Java Config / Annotation에서 bean 정의를 스캔
   2. bean 인스턴스 생성
   3. bean property에 의존성 주입
2. 스프링인지 여부 검사
   1. bean이 BeanNameAware 인터페이스 구현 시 setBeanName() 호출
   2. bean이 BeanClassLoaderAware 인터페이스 구현 시 setBeanClassLoader() 호출
   3. bean이 ApplicationContextAware 인터페이스 구현 시 setApplicationContext() 호출
3. Bean 생성 생명주기 Callback
   1. @PostConstruct Annotation 적용 메소드 호출
   2. bean이 initializingBean 인터페이스 구현시 afrerPropertiesSet() 호출
   3. bean이 init-method 정의하면 지정한 메소드 호출
4. Bean 소멸 생명주기 Callback
   1. @PreDestory Annotation 적용 메소드 호출
   2. bean이 DispoableBean 인터페이스 구현시 destroy() 호출
   3. bean이 destroy-method 정의하면 지정한 메소드 호출

### IoC Container

* 컨테이너는 보통 인스턴스의 생명 주기를 관리하며, 생성된 인스턴스들에게 추가적인 기능을 제공하도록 한다.
* 작성한 코드의 처리과정을 위임받은 독립받은 존재이다.
* 적절한 설정만 되어 있다면 누구의 도움 없이도 프로그래머가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤해준다.
* 스프링 컨테이너는 IoC를 이숑해 애플리케이션을 구성하는 빈/컴포넌트들을 관리한다.
* 스프링 컨테이너 = IoC컨테이너 = DI컨테이너
* 스프링 컨테이너는 두 종류가 있다.
  * BeanFactory
    * DI의 기본사항을 제공하는 가장 단순한 컨테이너
    * 팩토리 패턴을 구현한 것
    * Bean을 생성하고 분배하는 책임을 지는 클래스
    * Bean의 정의는 즉시 로딩하지만, 빈 인스턴스 생성은 Lazy Loading한다.
    * 처음으로 getBean()이 호출된 시점에서야 해당 빈을 생성한다.(Lazy Loading)
  * ApplicationContext
    * BeanFactory 인터페이스를 상속 받은 하위 인터페이스이다.
    * 하지만 내부적으로 별도의 BeanFactory를 유지하고 있다.
    * 즉시 인스턴스를 만든다.
    * BeanFactory와 유사한 기능을 제공하지만 좀 더 많은 기능을 제공한다.
    * 국제화가 지원되는 텍스트 메시지를 관리해준다.
    * 이미지 같은 파일 자원을 로드 할 수 있는 포괄적인 방법을 제공한다.
    * Listener로 등록된 Bean에게 이벤트 발생을 알려준다.
    * Context초기화 시점에서 모든 싱글톤 Bean을 미리 로드한 후 애플리케이션을 기동한다.

### IoC(Inversion of Control, 제어의 역전)

* 프로그램의 제어 흐름 구조가 바뀌는 것
* 사용자가 객체를 생성하고 소멸시키는 것이 컨테이너가 대신 하게 된다.(제어의 역전)
* 이 제어권이 스프링 컨테이너로 넘어가는 것이 Spring IoC이다.
* 제어권이 컨테이너로 넘어감으로써 DI, AOP가 가능해졌다.
* 인스턴스의 생성부터 소멸까지의 객체(Bean) 생명주기를 컨테이서가 관리하게 된다.
* 스프링에서 객체가 만들어지는 순서
  1. 객체 생성
  2. 의존성 객체 주입(스스로 만드는 것이 아니라 제어권을 가진 스프링에게 위임하여 스프링이 만드러 놓은 객체를 주입한다.)
  3. 의존성 객체 메소드 호출

### DI(Dependency Injection, 의존성 주입)

* 인스턴스를 자신이 아닌 IoC 컨테이너에서 생성 후 주입한다.
* 내부적으로 new 키워드를 사용하지 않고 setter나 생성자를 이용한다.
* 기능이 변경 될 때 마다 코드를 변경하는 것은 비용이 많이 들게 되므로 가급적 코드의 변화가 적어지도록 프로그램을 작성하기 위해 탄생
* 모듈 간 결합도를 낮춰서 유연한 변경을 가능하도록 한다.
* 불필요한 의존 관계를 없애거나 줄일 수 있다.
* 각 객체를 bean 컨테이너로 관리한다.
* IoC를 구현하는 한 가지 방법이 DI이다.

### AOP(Aspect Oriented Programming, 관점 지향 프로그래밍)

* 애플리케이션 전체에 걸쳐 사용되는 기능들 재사용하도록 지원하는 것이다.
* 가로(횡단) 영역의 공통된 부분을 잘라냈다고 하여 크로스 컷팅(Cross-Cutting)이라고도 불린다.
* 로깅, 트랜잭션, 보안 등
* 로직 주입
* 프록시 패턴과 유사
* 용어
  * Aspect - 어플리케이션에서 분산된 실제 비지니스 코드가 아닌 코드 또는 기능을 말한다. 스프링 AOP에서는 Advice 와 Pointcut을 합친 것을 말한다.
  * JoinPoint - 조인 포인트는 프로그램 실행하는 동안 메소드나 예외 처리와 같은 실행 지점이다. 스프링 AOP에서는 항상 메소드 실행을 의미한다.
  * Advice - 특정 Joinpoint, 즉 특정 지점에서 실행될 행위이다. 스프링 AOP에서는 특정 메소드에 추가할 코드를 의미한다.
  * Pointcut - Advice를 실행할 Joinpoint를 나타내는 표현식이다.
  * Weaving - Pointcut으로 지정한 메소드에 Advice를 적용하는 과정이다. 스프링 AOP에서는 Aspect와 타겟 오브젝트를 연결해주는 과정을 의미한다.
* AOP 구현 방법으로는 Spring AOP와 AspectJ가 있다.
  * 최신 버전의 Spring AOP는 CGLib Proxy를 사용한다. (JDK Proxy vs CGLib Proxy 그림 참조)
  * 둘의 차이점은 Weaving이다.
  * Spring AOP는 CGLib를 사용하기 때문에 클래스를 상속해서 Proxy 패턴을 만든다.
    * 상속을 하기 때문에 셀프 호출에는 Spring AOP를 적용할 수 없다.
  * AspectJ는 Proxy 패턴을 만들지 않고 바이트 코드를 직접 수정한다.
    * 바이트 코드를 직접 수정하기 때문에 셀프 호출을 해도 AOP가 적용된다.

### Spring MVC

1. 클라이언트의 요청에 대한 최초 진입 지점은 DispatcherServlet이 담당하게 된다. 일종의 front controller이다. 이 servlet이 다음 작업을 처리하게 된다.
2. DispatcherServlet은 Spring Bean Definition에 설정되어 있는 Handler Mapping 정보를 참조하여 해당 요청을 처리하기 위한 Controller를 찾는다.
3.  DispatcherServlet은 선택된 Controller를 호출하여 클라이언트가 요청한 작업을 처리한다.
4. Controller는 Business Layer와 통신하여 원하는 작업을 처리한 다음 요청에 대한 성공 유무에 따라 ModelAndView 인스턴스를 반환한다. ModelAndView 클래스에는 UI Layer에서 사용할 Model 데이터와 UI Layer로 사용할 View에 대한 정보가 포함되어 있다.
5. DispatcherServlet은 ModelAndView의 View의 이름이 논리적인 View 정보이면 ViewResolver를 참조하여 이 논리적인 View 정보를 실질적으로 처리해야 할 View를 생성하게 된다.
6. DispatcherServlert은 ViewResolver를 통하여 전달된 View에게 ModelAndView를 전달하여 마지막으로 클라이언트에게 원하는 UI를 제공할 수 있도록 한다. 마지막으로 클라이언트에게 UI를 제공할 책임은 View 클래스가 담당하게 된다.

### Spring Data JPA

* JPA(Java Persistence API) : 자바 영속성
* 도메인 주도 개발이 가능하다.
* 애플리케이션 코드가 SQL 데이터베이스 관련 코드에 잠식 당하는 것을 방지하고 도메인 기반의 프로그래밍으로 비즈니스 로직을 구현하는데 집중할 수 있다.
* 개발 생산성이 좋으며, 데이터베이스에 독립적인 프로그래밍이 가능하다.
* 타입 안정적인 쿼리 작성, Persistent Context가 제공하는 캐시 기능으로 성능 최적화까지 가능하다.
* 영속성 관리와 ORM을 위한 표준 기술이다.
* ORM 표준 기술로 Hibernate, OpenJPA, EclipseLink, TopLink Essentails과 같은 구현체가 있고 이에 표준 인터페이스가 JPA이다.

### MyBatis

* 개발자가 지정한 SQL, 저장프로시저, 그리고 몇가지 고급 매핑을 지원하는 Persistent 프레임워크다.
* JDBC로 처리한는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.
* 데이터베이스 결과에 원시 타입과 Map 인터페이스 그리고 POJO를 설정해서 매핑하기 위해 XML과 어노테이션을 사용할 수 있다.
* SqlSessionFactory을 사용한다. 실제 SQL를 호출해주는 역할을 한다.
* Java 소스에서 SQL을 분리해준다.

### 생성자 의존성 주입

* Spring 4.3+부터 생성자가 1개일 경우 @Autowired없이 생성자 의존성 주입이 가능하다.
* 단일 책임의 원칙
  * 생성자의 인자가 많을 경우 코드량도 많아지고, 의존 관계도 많아져 단일 책임의 원칙에 위배된다.
  * 의존관계, 복잡성을 쉽게 알수 있어 리팩토링의 단초를 제공하게 된다.
* 테스트 용이성
  * 특정 DI 컨테이너에 의존하지 않고, POJO여야 한다.
  * DI 컨테이너를 사용하지 않고도 인스턴스화 할 수 있고, 단위 테스트도 가능하며 다른 DI 프레임워크로 전환할 수 있게 된다.
* immutability
  * 필드가 final이 가능해 객체가 변경 불가능 상태가 된다.
* 순환 의존성
* 의존성 명시

### JSP(Java Server Pages)

* 실행 시 서블릿.HttpServlet 클래스를 상속받은 자바 소스코드로 변환한 다음 컴파일되어 실행된다.
* JSP 파일을 서블릿 클래스로 변환하고 실행시켜 주는 역할을 하는 것이 서블릿 컨테이너이다.

## Hystrix

#### Spring Hystrix
* Netflix OSS의 하나
* 분산 환경(MSA)에서 장애 내성과 지연 내성을 위한 라이브러리다.
* 최소한의 부하로 운영이 가능하다.
* Circuit Breaker, DashBoard 기능이 있다.
* 내부적으로 RxJava를 사용하고 있다.
* Circuit Breaker 구현체라고도 한다.

#### Circuit Breaker
* 서비스간 의존성이 발생하는 접근 포인트를 분리시켜서 장애 전파를 막는다.
* Fallback를 제공하여 시스템 장애로부터 복구를 유연하게 한다.
* 스레드 풀 방식과 세마포어 방식이 있다.
* 동기 방식과 비동기 방식으로 구성할 수 있다.

##### Thread Pool
* 서비스 호출이 별도의 스레드에서 수행된다.
* Tomcat 스레드 풀과 서비스 호출 스레드 풀이 격리된다.
* 약간의 오버헤드가 발생한다.
* 기본값이다.

##### Semaphore
* 서비스 호출을 위한 스레드를 생성하지 않는다.
* Tomcat 스레드를 그대로 사용한다.

#### Circuit Breaker 발동 조건(기본 값)
* 20번의 메소드 실행 중, 10번 이상 실패 시 서킷 브레이커가 열린다.
* 19번의 메소드가 실행됬다면, 기본 충족수 미달로 서킷브레이커가 발동하지 않는다.

#### Circuit Breaker 해제 조건(기본 값)
* 5초 이내에 단 하나의 메소드를 다시 실행 후 성공 시 서킷 브레이커가 닫힌다. 실패할 경우 열림이 유지 된다.

#### Circuit Breaker 생명 주기
1. HystrixCommand, HystrixObservableCommand 객체 생성
2. Command 실행
3. 캐시 상태 확인
4. 회로 상태 확인
5. 사용 가능한 Thread Pool / Semaphore가 있는지 확인
6. HystrixCommand.run() / HystrixObservableCommand.construc() 실행
7. Calculate Circuit Health 확인
8. Fallback 실행
9. 응답 반환