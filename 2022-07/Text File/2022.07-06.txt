인스턴스를 생성할때 왼쪽과 오른쪽의 객체의 유형이 서로 다른경우.

Parent A = new Child();

이경우 두 유형이 상속관계에 있으며 Parent가 Child 의 상위 클래스 인 경우에만 형 변환이 이루어진다.

즉, 하위클래스에서 상위클래스로 형 변환을 하는것은 하위 클래스가 상위클래스에서 확장하는 개념이라 가능하지만,

상위클래스에서 하위클래스로 형 변환하는 것은 강제로 형변환을 해주어야한다.

단, 메소드는 새로운 인스턴스를 생성할때 사용한 자료형 내부에 있는 오버라이딩된 메소드를 가져오며,

멤버 변수는 변수를 생성할때 사용한 자료형 내부에 있는 멤버변수를 사용한다.

baekjoon

문제 번호 : 1978

문제 이름 : 소수 찾기

문제 내용 : 주어진 수 N개 중에서 소수가 몇 개인지 찾아서 출력하는 프로그램을 작성하시오.

- 첫 줄에 수의 개수 N이 주어진다. N은 100이하이다. 다음으로 N개의 수가 주어지는데 수는 1,000 이하의 자연수이다.

여기서말하는 소수란 약수가 1과 자기 자신만 있는 자연수이다.(약수가 2개)

sosu = 0
for num in numbers:  # numbers 에는 처음 숫자들을 입력받은 리스트 이다.
    error = 0
    if num > 1 : # 1은 소수가 아니기때문에 제외 한다.
        for i in range(2, num):  # 2부터 n-1까지 (1과 자기자신을 제외한 숫자를 전부 비교)
            if num % i == 0:     # 자기자신의 약수를 찾는과정, 1과 자기자신을 제외한 숫자로 자신을 나눴을때, 나머지가 0이라면 소수가아니다.
                error += 1  # 2부터 n-1까지 나눈 나머지가 0이면 error가 증가
        if error == 0:
            sosu += 1  # error가 없으면 소수.

문제 번호 : 2581

문제 이름 : 소수

문제 내용 : 자연수 M과 N이 주어질 때 M이상 N이하의 자연수 중 소수인 것을 모두 골라 이들 소수의 합과 최솟값을 찾는 프로그램을 작성하시오.

예를 들어 M=60, N=100인 경우 60이상 100이하의 자연수 중 소수는 61, 67, 71, 73, 79, 83, 89, 97 총 8개가 있으므로, 이들 소수의 합은 620이고, 최솟값은 61이 된다.

첫번째줄에 소수들 합
두번째줄에 소수 최솟값


start = int(input()) // 시작 입력값
end = int(input()) // 끝 입력값
res = 0 // 결과 변수
List = [] // 시작 ~ 끝 숫자 리스트
soList = [] // 소수 리스트
for i in range(start, end+1):
    List.append(i) // 시작 ~ 끝 숫자 리스트 추가
for a in List:
    test = 0 // 소수 판단기
    if a > 1: // 1은 소수가 아니기에 제외
        for j in range(2, a): // 2 부터 본인 -1 숫자를 하나씩 본인에게 나누기
            if a % j == 0: // 나눴을때 나머지가 딱 떨어지면 소수가 아님
                test += 1 // 소수가 아니라는 뜻
        if test == 0: // 소수가 아니라면
            res += a // 결과값에 해당 숫자(소수) 더하기
            soList.append(a) // 소수 리스트에 소수 추가 (소수중 최솟값을 구하기 위함)
if res > 0: // 숫자 리스트에 소수가 있다면
    print(res) // 소수들의 합
    print(min(soList)) // 소수들의 최솟값
else:
    print(-1) // 숫자 리스트에 소수가 없을때


문제 번호 : 11653

문제 이름 : 소인수분해

문제 내용 : 정수 N이 주어졌을 때, 소인수분해하는 프로그램을 작성하시오.

N = int(input())
if N > 1:
    while N > 1:   
        arr = []
        for i in range(2, N+1):
            if N % i == 0:
                print(i)
                N = N//i
                break
