C# const 와 readonly

const 

. 컴파일 타입의 상수이다. 즉, 컴파일 시 const 변수의 값을 가져온다.

. 내장자료형에 대해서만 사용 할 수 있다. (정수형, 실수형, Enum, String)

. 변수 선언과 동시에 값을 할당 해야 한다.

. 메모리 할당 위치는 Stack Memory 이며 static 선언을 하면 Heap Memory에 저장한다.

readonly

. 런타임 상수이다. 즉, exe, dll을 사용할때 변수의 값을 가져온다.

. 모든 자료형에 사용 할 수 있으며, 생성과 동시에 초기화 할 필요는 없다.

. 생성자 단게에서 단 1번 할당을 통해 초기화 할 수 있다.

. 메모리 할당 위치는 Heap Memory다.

etc. 

const는 Stack Memory에 저장 되기 때문에 접근이 빠르다는 장점이있다.
const는 컴파일 상수이기 때문에 const변수 값이 바뀌는 경우에 해당 프로젝트와 참조를 받거나 영향을
받는 프로젝트 모두 컴파일을 다시해야한다.

하지만 readonly는 생성시 선언하지 않아도 생성자에서 초기화 해서 사용 할 수 있기 때문에 유연하다.
그리고 실제 사용하는 단계에서 변수의 값을 가져오는 이점이있다.

즉, const와 readonly의 차이점은 상수값변경시 재 컴파일의 유무로 변수에 값을 가져올수 있느냐 아니냐이다.

const 상수값 변경시 재컴파일 해야함

readonly 상수값 변경시 사용하는 생성자 단계에서 변수에 값 할당 후 사용 가능

%%% 쿠키와 세션 %%%

HTTP프로토콜 환경 특징 

connectionless

. 클라이언트가 요청 한 후 응답을 받으면 연결을 바로 끊어버리는 특징이다.

stateless

. 통신이 끝나면 상태를 유지하지 않는 특징

. 즉 이 특징으로 인해서 쇼핑몰에서 다른 페이지로 이동할때마다 재 로그인을 해야할수도 있다.

. 이같은 상황을 고려해서 사용하는것이 쿠키와 세션.

쿠키 

. 클라이언트(브라우저) 로컬에 저장되는 키와 값이 들어있는 데이터 파일

. 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지됨.

쿠키 동작 방식

1. 클라이언트가 페이지 요청

2. 서버에서 쿠키 생성

3. HTTP 헤더에 쿠키 포함시켜 응답

4. 브라우저가 종료돼도 쿠키 만료 기간 있으면 클라이언트에서 보관중

5. 같은 요청 시 HTTP 헤더에 쿠키 함께 보냄

6. 서버에서 쿠키를 읽은 후 쿠키 변경 필요시 쿠키 업데이트해서 다시 HTTP헤더에 포함시켜서 응답함

쿠키 사용 예시

1. 쇼핑몰의 장바구니 기능

2. 자동로그인, 팝업에서 "오늘 더 이상 이 창을 보지 않음" 체크

세션

. 쿠키를 기반하고 있지만, 쿠키와 달리 그 정보를 서버에서 저장함

. 서버에서 클라이언트를 구분하기 위해 세션 ID를 부여해서 브라우저 종료시까지 인증상태 유지

. 정보가 서버에 있기때문에 보안이 더 좋지만 그만큼 과부하도 빨리온다.

세션 동작 방식

1. 클라이언트가 서버에 접속 시 세션ID 발급받는다.

2. 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고있다.

3. 클라이언트가 서버에 요청할때, 쿠키의 세션ID를 같이 서버에 전달함

4. 서버는 세션 ID를 받고 세션에있는 클라이언트 정보를 가져와서 사용함

5. 그정보를 가지고 다시 클라이언트에게 응답

세션의 사용 예시

1, 로그인 같은 보안상 중요한 작업할때 사용한다.

쿠키와 세션의 라이프 사이클 차이

쿠키 - 만료시간이 있으며 파일 상태로 저장되기때문에 만료시간이 길다면 브라우저를 종료해도 그 정보가 남아있다.

세션 - 만료시간이 있지만 브라우저를 종료하면 만료시간과 상관없이 바로 삭제된다.

+++++++++++++++++++++++++++++++++++++++++++++++++++

토큰 이란?

