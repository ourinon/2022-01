오버라이딩 - 인터페이스를 하나 받고 거기에있는 메소드 재정의 해주는 과정

오버로딩 - 똑같은이름의 메소드, 하지만 다른 파라미터

### Git

* 소스코드를 효과적으로 관리하기 위해 개발된 분산형 버전 관리 시스템이다.
* fetch : 리모트 서버로부터 저장소 정보를 동기화한다.
* rebase : 커밋을 합친다.

### Git Flow

* Branch 관리 전략, Branching 기법
* 프로젝트를 진행하면서 발생하는 수 많은 Branch를 쉽게 다룰 수 있도록 해 주는 규칙, 전략이다.
* 기본 전략이기 때문에 커스터마이징 해서 사용하면 된다.
* feature branch를 이용해 기능 개발의 책임 소개를 명확히 한다.
* 개발 버전과 제품 버전을 개별 관리 할 수 있다.
* Pull Request를 이용하기 때문에, 이를 이용해 코드 리뷰를 쉽게 할 수 있다.
* feature branch와 hotfix의 commit message를 취합하게 되면, 이전 버전과의 변경 점을 쉽게 파악 할 수 있다.

### IO

* Input / Output
* 입출력 방식 : Stream
* 데이터 형식 : byte
* 동기
* Blocking
* 단방향 통신
* 접속하는 클라이언트 수가 적을때, 순차적, 대용량일때 적합

### NIO

* Java NIO는 Non-Blocking I/O가 아니다.
* New Input / Output이다.
* File 관련 NIO는 모두 Blocking I/O
* NIO2의 AsynchronousFileChannel은 Non-Blocking I/O
* 입출력 방식 : Channel
* 데이터 형식 : buffer
* 동기, 비동기
* Non-Blocking / Blocking
* 양방향 통신
* 접속하는 클라이언트 수가 많고, 하나의 I/O가 오래 걸리지 않을 때 적합

### Blocking

* System Call이 끝날 때 까지 프로그램은 대기해야 하고 System Call이 완료되면 그때야 Return 한다.
* Wait Queue에 들어간다.
* 스레드가 작업이 종료될 때 까지 대기한다.
* 호출된 함수가 자신의 작업을 모두 마칠 때 까지 호출한 함수에게 제어권을 넘겨주지 않고 대기하게 만든다

### NonBlocking

* System Call이 완료되지 않아도 대기하지 않고 Return 해버린다.
* Wait Queue에 들어가지 않는다.
* 스레드가 작업이 종료될 때 까지 기다리지 않는다.
* 호출된 함수가 바로 리턴해서 호출한 함수에게 제어권을 넘겨주고 호출한 함수가 다른 일을 할 수 있는 기회를 줄 수 있다.

### Blocking & Non-Blocking

* 함수 호출 시 제어권 리턴 유무
* Non-Blocking은 제어문 수준에서 지체없이 반환하는 것
* 호출하는 입장에서의 특징

### Synchronous(동기)

* 호출되는 함수에게 Callback을 전달해서 호출되는 함수의 작업이 완료되면 호출되는 함수가 전달받은 callback을 실행하고 호출하는 함수는 작업 완료 여부를 신경쓰지 않는다.
* 호출되는 함수의 작업 완료를 호출한 함수가 신경쓴다.
* System Call이 끝날때까지 기다리고 결과물을 가져온다.

### Asynchronous(비동기)

* 호출하는 함수가 호출되는 함수의 작업 완료후 리턴을 기다리거나, 호출회는 함수로부터 바로 리턴 받더라도 작업 완료 여부를 호출하는 함수 스스로 계속 확인하며 신경쓴다.
* 호출되는 함수의 작업 완료를 호출한 함수가 신경쓰지 않는다.
* System Call이 완료되지 않아도 나중에 완료되면 그때 결과물을 가져온다.
* 주로 Callback 함수를 통해 결과물을 가져온다.
* 별도의 스레드로 빼서 실행하고, 완료되면 호출하는 측에 알려주는 것이다.

### Synchronous & Asynchronous

* 함수 호출 시 작업 완료 여부 신경 유무
* 처리되는 방식의 특징

### Node

* Non-Blocking I/O와 단일 스레드 이벤트 루프를 통해 높은 성능을 가진다.
* 내장 HTTP 서버 라이브러리를 포함하고 있다.
* 웹 서버에서 아파치 등 별도의 소프트웨어 없이 동작하는 것이 가능하다.
* V8 엔진으로 빌드된 JavaScript 런타임이다.

### V8

### ECMA 6

### Docker

* 컨테이너 기반의 오픈소스 가상화 플랫폼이다.
* 다양한 프로그램, 실행 환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해 준다.
* 이미지는 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있다.
* 레이어라는 개념을 사용한다.

### CI(Continuous Integration)

* 대표적으로 젠킨스(Jenkins)
* 지속적인 통한
* 프로젝트 빌드, 테스트 실행, 배포 등의 통합을 자동화한다.

### 함수형 프로그래밍

* map과 reduce는 함수형 프로그래밍의 도구일 뿐이지 함수형 프로그래밍이 아니다.
* 상태를 바꾸지 않고 입력 값에 따라 동일한 출력 값이 나오는 함수의 응용을 통해 프로그래밍을 하여 사이드 이펙트를 최소화 시키는 것이 함수형 프로그래밍이다.