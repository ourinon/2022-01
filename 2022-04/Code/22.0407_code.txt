BACKJOON 사용언어 : python

문제 이름 : 더하기 사이클

문제 번호 : 1110

문제 : 
0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

답 -

num = int(input())
result = 0
newNum = num
if num != 0:
    while True:       
        result += 1
        if newNum // 10 >= 1:
            Num = newNum // 10 + newNum % 10
            if Num // 10 >= 1:
                newNum = int(str(newNum % 10) + str(Num % 10))
            else:
                newNum = int(str(newNum % 10) + str(Num))
        else:
            newNum = int(str(newNum) + str(newNum))
        if num == int(newNum):
            print(result)
            break
else:
    print(1)

답(시간 초과) -

num = list(map(int, input()))
result = 0
newNum = num
if num[0] != 0:
    while True:       
        result += 1 #사이클실행횟수
        # num이 두자리일 경우
        if len(newNum) == 2:
            Num = newNum[0] + newNum[1]
            lastNum = list(map(int, str(Num)))
            if len(lastNum) == 2:
                newNum = int(str(newNum[1]) + str(lastNum[1]))
                newNum = list(map(int, str(newNum)))
            elif len(lastNum) == 1:
                newNum = int(str(newNum[1]) + str(lastNum[0]))
                newNum = list(map(int, str(newNum)))
        # num이 한자리일 경우
        elif len(newNum) == 1:
            newNum.append(newNum[0])
            newNum = int(newNum[0]) + int(newNum[1])
            newNum = list(map(int, str(newNum)))
        elif num == newNum:
            break
print(result)